name: Deploy #PACKER and TERRAFORM WORKFLOW 

on:
  push:
    branches:
    - main
    - update-tfc-backend
  workflow_dispatch: 




env: 
  AWS_ACCESS_KEY_ID :  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET}}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  TF_TOKEN_app_terraform_io: ${{secrets.TF_TOKEN_APP_TERRAFORM_IO}}
  G_ACCESS_TOKEN: ${{secrets.G_ACCESS_TOKEN}}

  PACKER_LOG: 1

jobs: 
  job1: 
      name: Build  
      runs-on: ubuntu-latest
      outputs: 
        iteration_id: ${{ steps.hcp.outputs.iteration_id }}

      steps: 
        - name: Checkout Repository 
          uses: actions/checkout@v2

        - name: Compile Application
          env: 
            GOOS: linux 
            GOARCH: arm64 
          working-directory: ./app 
          run: |
            go build -o bin/server 


        - name: Fix Template
          uses : hashicorp/packer-github-actions@master
          with: 
            command: fmt

        #Init template

        - name: Init template 
          uses: hashicorp/packer-github-actions@master
          with: 
            command: init
            target: image.pkr.hcl
            working_directory: images/ 


        #validate templates 
        - name: Validate Template
          uses: hashicorp/packer-github-actions@master
          with: 
            command: validate 
            arguments: -syntax-only 
            target: image.pkr.hcl
            working_directory: images/

        #Build Template 
        - name: Build Artifact 
          uses: hashicorp/packer-github-actions@master
          with: 
            command: build
            arguments: "-color=false -on-error=abort"
            target: image.pkr.hcl  
            working_directory: images/ 

        - name: Get HCP Packer Iteration ID from Packer Manifest
          id: hcp 
          working-directory: ./images 
          run: | 
            last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
            build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
            iteration_id=$(echo "$build" | jq -r '.custom_data.iteration_id')
            echo "::set-output name=iteration_id::$iteration_id"

          
  job2:
      name: 'Terraform' 
      runs-on: ubuntu-latest
      needs: job1
      env: 
        working-directory: ./instances


      steps:
        - name: checkout repo 
          uses: actions/checkout@v2
          #Check tf template 
        - name: Checkout TF
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      
       # THIS FAILS ON GHA 
       # - name: Terraform Format
       #   id: fmt
       #   run: terraform fmt -check
       #   working-directory: ${{env.working-directory}}


        - name: Terraform Init
          id: init
          run: terraform init -upgrade -input=false
          working-directory: ${{env.working-directory}}
      
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          working-directory: ${{env.working-directory}}

        - name: Terraform Plan
          id: plan
          if: github.event_name == 'pull_request'
          run: terraform plan -no-color -input=false
          continue-on-error: true

        - name: Update Pull Request
          uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env: 
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: | 
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

              <details><summary> Show Plan </summary> 

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
              })

        - name: Terraform Plan Status 
          if: steps.plan.outcome == 'failure'
          run: exit 1 

        - name: Terraform Apply 
          id: tf_apply
          working-directory: ${{env.working-directory}}
          if: github.ref == 'refs/heads/update-tfc-backend' && github.event_name == 'push'
          run: | 
            terraform apply -auto-approve -var="iteration_id=${{needs.job1.outputs.iteration_id }}"
            public_ip="$(terraform output -raw public_ip)"
            echo "::set-output name=public_ip::${public_ip}"


        - name: Invoke E2E Test 
          working-directory: ./.github/scripts
          run: ./e2e_test.sh ${{ steps.tf_apply.outputs.public_ip }}



 #this will get triggered based on sabin-repo(backend)

 #Notes to self: ssh keygen will be a problem because It will leak onto repo so User would have to do this manually 
 #Cont'd: 