name: Deploy #PACKER and TERRAFORM WORKFLOW 

on:
  repository_dispatch:
    types: [Deploy]     

env: 
  AWS_ACCESS_KEY_ID :  ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET}}
  TFC_API_TOKEN: ${{secrets.TFC_API_TOKEN}}
  G_ACCESS_TOKEN: ${{secrets.G_ACCESS_TOKEN}}
  PACKER_LOG: 1

jobs: 
  job1: 
      name: packer 
      runs-on: ubuntu-latest #version 20.04 ?

      steps: 
        - name: Checkout Repository 
          uses: actions/checkout@v2
        # Fix backwards incompatibilities in template 
        - name: Fix Template
          uses : hashicorp/packer-github-actions@master
          with: 
            command: fmt

        #Init template

        - name: Init template 
          uses: hashicorp/packer-github-actions@master
          with: 
            command: init
            target: image.pkr.hcl
            working_directory: images/ 


        #validate templates 
        - name: Validate Template
          uses: hashicorp/packer-github-actions@master
          with: 
            command: validate 
            arguments: -syntax-only 
            target: image.pkr.hcl
            working_directory: images/
        #Build Template 
        - name: Build Artifact 
          uses: hashicorp/packer-github-actions@master
          with: 
            command: build
            arguments: "-color=false -on-error=abort"
            target: image.pkr.hcl  
            working_directory: images/ 

          
  job2:
      name: 'Terraform' 
      runs-on: ubuntu-latest
      needs: job1
      env: 
        working-directory: ./instances


      steps:
        - name: checkout repo 
          uses: actions/checkout@v2
          #Check tf template 
        - name: Checkout TF
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      

        - name: Terraform Format
          id: fmt
          run: terraform fmt -check
          working-directory: ${{env.working-directory}}

        - name: Terraform Init
          id: init
          run: terraform init -input=false
          working-directory: ${{env.working-directory}}
      
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color
          working-directory: ${{env.working-directory}}

        - name: Terraform Plan
          id: plan
          if: github.event_name == 'pull_request'
          run: terraform plan -no-color -input=false
          continue-on-error: true

        - name: Update Pull Request
          uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env: 
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: | 
              const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

              <details><summary> Show Plan </summary> 

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

              *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
              })

        - name: Terraform Plan Status 
          if: steps.plan.outcome == 'failure'
          run: exit 1 

        - name: Terraform Apply 
          if: github.ref == 'refs/heads/main' && github.event_name == 'push'
          run: terraform apply -auto-approve -input=false 

        - name: Terraform Destroy 
          if: github.ref == 


#trigger the sabin-repo for push to master then wait for result here 
#and then deploy the newest version here with packer + terraform 

#This will be the deployment actions: Packer and terraform 



 #this will get triggered based on sabin-repo(backend)

 #Notes to self: ssh keygen will be a problem because It will leak onto repo so User would have to do this manually 
 #Cont'd: 